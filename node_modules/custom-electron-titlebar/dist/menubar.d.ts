import { IMenuStyle } from './menu/menu';
import { Disposable } from './common/lifecycle';
import { Event } from './common/event';
import { MenubarOptions } from './interfaces';
export declare class Menubar extends Disposable {
    private container;
    private options?;
    private menuItems;
    private focusedMenu;
    private focusToReturn;
    private _mnemonicsInUse;
    private openedViaKeyboard;
    private awaitingAltRelease;
    private ignoreNextMouseUp;
    private mnemonics;
    private _focusState;
    private _onVisibilityChange;
    private _onFocusStateChange;
    private menuStyle;
    private closeSubMenu;
    constructor(container: HTMLElement, options?: MenubarOptions, closeSubMenu?: () => void);
    private registerListeners;
    setupMenubar(): void;
    private onClick;
    get onVisibilityChange(): Event<boolean>;
    get onFocusStateChange(): Event<boolean>;
    dispose(): void;
    blur(): void;
    setStyles(style: IMenuStyle): void;
    private updateLabels;
    private registerMnemonic;
    private hideMenubar;
    private showMenubar;
    private get focusState();
    private set focusState(value);
    private get isVisible();
    private get isFocused();
    private get isOpen();
    private setUnfocusedState;
    private focusPrevious;
    private focusNext;
    private updateMnemonicVisibility;
    private get mnemonicsInUse();
    private set mnemonicsInUse(value);
    private onMenuTriggered;
    private onModifierKeyToggled;
    private isCurrentMenu;
    private cleanupMenu;
    private showMenu;
}
export declare function escape(html: string): string;
